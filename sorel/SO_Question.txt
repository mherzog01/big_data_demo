I am trying to read and process the keys in the AWS S3 bucket/prefix ```s3://sorel-20m/09-DEC-2020/binaries/```.  This is a public bucket used for [cyber security machine learning][1].

There are over 13 million binary files in this prefix.  

Just listing the files with an AWS CLI command such as ```aws s3 ls``` takes hours.

I tried filtering using a CLI filter:

```aws s3 cp s3://sorel-20m/09-DEC-2020/binaries/ . --recursive --dryrun --exclude '*' --include '0000029*'```

This returned data quickly, but then did not complete.  It seems that the CLI is reading the keys in alphabetical order, because when I search for keys at the end of an alphabetical sort (beginning with 'fff', the command below takes a long time to return data:

```aws s3 cp s3://sorel-20m/09-DEC-2020/binaries/ . --recursive --dryrun --exclude '*' --include 'fff*'```


I also tried the following AWS Glue (similar to Spark) script.  This timed out after 1 hour:

```
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

sc = SparkContext.getOrCreate()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)

df = spark.read.format("binaryFile").option('pathGlobFilter', '0000029*').option("wholeFile","true").load("s3://sorel-20m/09-DEC-2020/binaries")
#print(df.count())

df.select('Path').write.csv('s3://my-bucket')
job.commit()
```

If I knew the smallest and largest value of the first  character of each key I'm interested in, I could use ```boto3``` per https://stackoverflow.com/a/52450389/11262633.  This would allow me to launch parallel processes, each using a ```filter``` -- ```bucket.object.filter(Prefix=f'{prefix}{first_letter}```.

Here are example keys in the data:

```
09-DEC-2020/binaries/0000029bfead495a003e43a7ab8406c6209ffb7d5e59dd212607aa358bfd66ea
09-DEC-2020/binaries/000003b99c3d4b9860ad0b0ca43450603e5322f2cca3c9b3d543a2d6440305a0
09-DEC-2020/binaries/00000533148c26bcc09ab44b1acafe32dde93773d4a7e3dbd06c8232db5e437f
...
09-DEC-2020/binaries/fffffac77abc5f22baefd850a753b0e32a8c106f983f84f6b83fb20df465c7ab
09-DEC-2020/binaries/fffffd86f00a5b4547d3b99963cae39781fa015b3f869b3e232858dd6011d062
09-DEC-2020/binaries/fffffee23b47f84cfdf25c43af7707c8ffa94a974e5af9659e3ed67e2e30b80b
```

In the prefix ```09-DEC-2020/binaries/```, the smallest value of the first character seems to be ```0``` and the largest seems to be ```f```.  

***My question***

Would you recommend this approach?  If so, how could I ensure that all keys will start with a character between ```0``` and ```f```?

  [1]: https://github.com/sophos/SOREL-20M